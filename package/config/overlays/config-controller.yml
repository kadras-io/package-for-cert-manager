#@ load("@ytt:data", "data")
#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")

#@ def controller_config():
---
apiVersion: controller.config.cert-manager.io/v1alpha1
kind: ControllerConfiguration

clusterResourceNamespace: #@ data.values.namespace

leaderElectionConfig:
  namespace: #@ data.values.leader_election.namespace

maxConcurrentChallenges: 60

logging:
  verbosity: #@ data.values.controller.loglevel
  format: text

acmeHTTP01Config:
  solverImage: quay.io/jetstack/cert-manager-acmesolver:v1.17.2

acmeDNS01Config:
  recursiveNameservers: #@ data.values.controller.dns01.recursive_nameservers
  recursiveNameserversOnly: #@ data.values.controller.dns01.recursive_nameservers_only
#@ end

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-manager
  namespace: #@ data.values.namespace
  labels:
    app: cert-manager
    app.kubernetes.io/name: cert-manager
    app.kubernetes.io/instance: cert-manager
    app.kubernetes.io/component: "controller"
  annotations:
    kapp.k14s.io/versioned: ""
    kapp.k14s.io/versioned-keep-original: ""
    kapp.k14s.io/num-versions: "5"
data:
  config.yaml: #@ yaml.encode(controller_config())

#@overlay/match by=overlay.subset({"kind":"Deployment", "metadata":{"name":"cert-manager"}})
---
spec:
  template:
    spec:
      containers:
        #@overlay/match by="name"
        - name: cert-manager-controller
          #@overlay/replace
          args:
            - --config=/var/cert-manager/config/config.yaml
          #@overlay/match missing_ok=True
          volumeMounts:
            - name: config
              mountPath: /var/cert-manager/config
      #@overlay/match missing_ok=True
      volumes:
        - name: config
          configMap:
            name: cert-manager
